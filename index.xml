<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ffplayout</title><link>https://ffplayout.github.io/</link><description>Recent content on ffplayout</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 29 Jul 2021 09:19:16 +0200</lastBuildDate><atom:link href="https://ffplayout.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>ffplayout Engine</title><link>https://ffplayout.github.io/ffplayout-engine/</link><pubDate>Thu, 29 Jul 2021 09:19:16 +0200</pubDate><guid>https://ffplayout.github.io/ffplayout-engine/</guid><description>Features have all values in a separate config file dynamic playlist replace missing playlist or clip with a dummy clip playing clips from watched folder send emails with error message overlay a logo overlay text, controllable through messenger or ffplayout-frontend (needs ffmpeg with libzmq) EBU R128 loudness normalization (single pass) (experimental) loop clip in playlist which out value is higher then its duration, see also Loop Clip loop playlist infinitely trim and fade the last clip, to get full 24 hours when playlist is not 24 hours long, loop filler clip until time is full set custom day start, so you can have playlist for example: from 6am to 6am, instate of 0am to 12pm normal system requirements and no special tools no GPU power is needed stream to server or play on desktop on posix systems ffplayout can reload config with SIGHUP logging to files, or colored output to console add filters to input, if is necessary to match output stream: yadif (deinterlacing) pad (letterbox or pillarbox to fit aspect) fps (change fps) scale (fit target resolution) aevalsrc (if video have no audio) apad (add silence if audio duration is to short) tpad (add black frames if video duration is to short) add custom filters add custom arguments different types of output: stream desktop HLS custom Multi Channel Requirements python version 3.</description></item><item><title/><link>https://ffplayout.github.io/ffplayout-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ffplayout.github.io/ffplayout-api/</guid><description>ffplayout-api django REST API, backend for ffplayout-frontend and for controlling ffplayout_engine
You can install it on a fresh Debian like system with the standalone installer. Or read the instruction install.md for manual installation.</description></item><item><title/><link>https://ffplayout.github.io/ffplayout-frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ffplayout.github.io/ffplayout-frontend/</guid><description>ffplayout-frontend This web GUI is for managing ffplayout_engine and it depend on ffplayout-api.
The Interface is mostly made for 24/7 streaming. Other scenarios like streaming in folder mode or playlists with no starting time will work, but is not shown correctly.
For a better understanding about the functionality, take a look to the screenshots below.
You can install it on a fresh Debian like system with the standalone installer. Or read the instruction install.</description></item><item><title/><link>https://ffplayout.github.io/ffplayout-installer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ffplayout.github.io/ffplayout-installer/</guid><description>ffplayout Installer Standalone installer for the ffplayout app collection
Run install.sh as root for full installation.
A debian based system is recommend.
CentOS 8+ and Fedora can work, but is not widely tested. If you really need it, you have to apply SeLinux rules. For that you have selinux.sh, check this script carefully if the rules a ok for you.
The most tested system is Debian 10.
If you prefer a dockerized version of ffplayout, checkout ffplayout-docker</description></item></channel></rss>